/**
 * botLogic.js - L√≥gica principal del Bot de Instagram con IA y MongoDB
 *
 * Descripci√≥n: Contiene las funciones para conectar, generar mensajes, enviar y registrar.
 *              Se ejecuta al ser llamado desde server.js con la configuraci√≥n necesaria.
 * Versi√≥n: 3.0
 */

const { IgApiClient } = require('instagram-private-api');
const { OpenAI } = require('openai');
const { MongoClient } = require('mongodb');
const fs = require('fs');
const fsp = require('fs').promises;
const path = require('path');
const csv = require('csv-parser');

// --- Variables globales dentro del m√≥dulo (se inicializar√°n en runBotLogic) ---
let igClient;
let openai;
let mongoClient;
let mongoCollection;
let botUsername; // Nombre de usuario del bot logueado

// --- Funciones de utilidad (como las ten√≠as antes) ---
function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}

function getRandomDelay(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

async function logAction(message) {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] ${message}\n`;
    try {
        await fsp.appendFile('ai_bot.log', logMessage, 'utf8');
    } catch (logError) {
        console.error("‚ö†Ô∏è Error al escribir en ai_bot.log:", logError.message);
    }
    console.log(message); // Tambi√©n loguea en consola
}

function formatDateTime(date) {
    const yyyy = date.getFullYear();
    const mm = String(date.getMonth() + 1).padStart(2, '0');
    const dd = String(date.getDate()).padStart(2, '0');
    const hh = String(date.getHours()).padStart(2, '0');
    const mi = String(date.getMinutes()).padStart(2, '0');
    const ss = String(date.getSeconds()).padStart(2, '0');
    return `${yyyy}-${mm}-${dd} ${hh}:${mi}:${ss}`;
}

// --- Conexi√≥n a MongoDB ---
async function connectMongo(mongoUri) {
    if (mongoClient && mongoClient.topology && mongoClient.topology.isConnected()) {
        logAction('‚ÑπÔ∏è Ya conectado a MongoDB.');
        return mongoCollection;
    }
    try {
        mongoClient = new MongoClient(mongoUri);
        await mongoClient.connect();
        logAction('‚úÖ Conectado a MongoDB');
        mongoCollection = mongoClient.db('instagram_bot').collection('historial_mensajes');
        return mongoCollection;
    } catch (error) {
        logAction(`‚ùå Error conectando a MongoDB: ${error.message}`);
        throw new Error(`Error fatal conectando a MongoDB: ${error.message}`); // Propaga el error
    }
}

// --- Generaci√≥n de mensajes con IA (sin cambios significativos) ---
async function generateAIMessage(targetUsername, profileData, context) {
    // ...(c√≥digo id√©ntico al que ten√≠as en tu script original)...
    // Aseg√∫rate de que 'openai' est√© inicializado antes de llamar esta funci√≥n
    if (!openai) throw new Error("Cliente OpenAI no inicializado.");

    let detailedUserData = {};
    try {
        // Re-usar igClient inicializado globalmente
        detailedUserData = await igClient.user.info(profileData.pk);
    } catch (infoError) {
        logAction(`‚ö†Ô∏è No se pudieron obtener detalles completos para @${targetUsername}. Usando datos b√°sicos.`);
        detailedUserData = {
            full_name: profileData.full_name,
            biography: profileData.biography,
            follower_count: profileData.follower_count,
        };
    }

    try {
      const prompt = `Eres un asistente de redes sociales amigable y natural. Genera un mensaje corto y √∫nico (m√°ximo 2 frases, idealmente 1) para enviar por DM de Instagram a @${targetUsername}.
Aqu√≠ hay informaci√≥n sobre el usuario (puede ser limitada):
- Nombre Completo: ${detailedUserData.full_name || 'No disponible'}
- Biograf√≠a: ${detailedUserData.biography || 'No disponible'}
- Seguidores: ${detailedUserData.follower_count || 'N/A'}

Contexto para el mensaje (objetivo): ${context}

Reglas IMPORTANTES para el mensaje:
1.  **Naturalidad Extrema:** Debe sonar como si lo escribiera una persona real, no un bot. Evita formalismos excesivos o lenguaje de marketing obvio.
2.  **Brevedad:** Una frase es ideal, m√°ximo dos. Los DMs largos suelen ignorarse.
3.  **Evita Saludos Gen√©ricos:** NO uses "Hola [nombre]", "Hola @${targetUsername}", "Qu√© tal?", "Espero que est√©s bien". Ve directo al punto de forma amigable.
4.  **Personalizaci√≥n Sutil (Si es posible):** Si hay algo *interesante* y *no gen√©rico* en el nombre o biograf√≠a, haz una referencia MUY SUTIL. Si no hay nada destacable, no fuerces la personalizaci√≥n. Ejemplo sutil: si la bio dice "Amante de los gatos", podr√≠as empezar con "Vi que te gustan los gatos!..." (solo si encaja con el contexto). Si la bio est√° vac√≠a o es gen√©rica, ign√≥rala.
5.  **Enfocado en el Contexto:** El mensaje debe reflejar claramente el objetivo proporcionado en el contexto.
6.  **Llamada a la Acci√≥n Impl√≠cita o Suave (Opcional):** Puede terminar con algo que invite a la interacci√≥n relacionada con el contexto, pero sin ser agresivo.
7.  **Variedad:** Aseg√∫rate de que cada mensaje sea distinto a los anteriores generados en esta sesi√≥n.
8.  **Tono:** Amigable, cercano y respetuoso.

Ejemplo de MALA salida: "Hola ${detailedUserData.full_name}, vi tu perfil y quer√≠a invitarte a mi evento." (Demasiado gen√©rico y formal)
Ejemplo de BUENA salida (si el contexto es invitar a un evento de m√∫sica): "Che, vi que te gusta la m√∫sica, te paso la data de un evento que te puede copar!"
Ejemplo de BUENA salida (si el contexto es ofrecer un servicio de dise√±o): "C√≥mo va? Vi tu perfil, si and√°s necesitando una mano con dise√±o gr√°fico, chiflame!"

Genera SOLO el texto del mensaje final.`;


        const response = await openai.chat.completions.create({
            model: 'gpt-4o-mini', // O el modelo que prefieras/tengas acceso
            messages: [{ role: 'user', content: prompt }],
            temperature: 0.8,
            max_tokens: 70,
            n: 1,
            stop: ["\n\n"],
        });

        let messageContent = response.choices[0].message.content.trim();
        messageContent = messageContent.replace(/^"|"$/g, '');
        messageContent = messageContent.replace(/\\n/g, ' ');
        messageContent = messageContent.replace(/\s+/g, ' ');

        const sentences = messageContent.split(/(?<=[.?!])\s+/);
        if (sentences.length > 2) {
            messageContent = sentences.slice(0, 2).join(' ');
        }

        if (!messageContent || messageContent.length < 10) {
            logAction(`‚ö†Ô∏è Mensaje generado por IA demasiado corto o vac√≠o para @${targetUsername}. Se usar√° un mensaje de respaldo.`);
            return `Qu√© tal? Vi tu perfil y pens√© que te podr√≠a interesar esto relacionado con: ${context}. Saludos!`;
        }

        return messageContent;
    } catch (error) {
        logAction(`‚ùå Error generando mensaje con IA para @${targetUsername}: ${error.message}`);
        // Considerar si devolver null o un mensaje de fallback aqu√≠ podr√≠a ser mejor
        // dependiendo de si quieres registrar el fallo o intentar enviar algo gen√©rico
        if (error.response && error.response.status === 429) {
            logAction("üö¶ L√≠mite de tasa de OpenAI alcanzado. Esperando 60 segundos...");
            await sleep(60000);
            // Podr√≠as reintentar aqu√≠, pero por simplicidad devolvemos el fallback
        }
        return `Hola! Te contacto por esto: ${context}. Puede que te interese.`; // Fallback
    }
}


// --- Manejo de CSV (sin cambios significativos) ---
async function readCSV(filePath) {
    // ...(c√≥digo id√©ntico al que ten√≠as en tu script original)...
     return new Promise((resolve, reject) => {
        logAction(`üìÑ Leyendo archivo CSV: ${filePath}`);
        const results = [];
        fs.createReadStream(filePath)
          .pipe(csv({ /* separator: ';' */ })) // Detecta autom√°ticamente o especifica si es necesario
          .on('data', (data) => {
               const cleanedData = {};
               for (const key in data) {
                   const cleanedKey = key.trim().toLowerCase().replace(/\s+/g, '');
                   if (cleanedKey === 'username') {
                       cleanedData['userName'] = data[key];
                   } else if (cleanedKey === 'fullname') {
                       cleanedData['fullName'] = data[key];
                   } else if (cleanedKey === 'id') {
                        cleanedData['id'] = data[key];
                   } else {
                        cleanedData[cleanedKey] = data[key];
                    }
               }
               if (!('userName' in cleanedData)) cleanedData.userName = '';
               if (!('fullName' in cleanedData)) cleanedData.fullName = '';
               results.push(cleanedData);
          })
          .on('end', () => {
            logAction(`‚úÖ CSV le√≠do. ${results.length} filas encontradas.`);
            if (results.length > 0) {
                logAction(`üîç Cabeceras detectadas (limpias): ${Object.keys(results[0]).join(', ')}`);
            }
            resolve(results);
          })
          .on('error', (err) => {
             logAction(`‚ùå Error leyendo CSV: ${err.message}`);
             reject(new Error(`Error leyendo CSV: ${err.message}`)); // Propagar error
          });
      });
}

// --- Filtrar Cuentas (adaptado para recibir keywords como string) ---
async function filterAccountsByFullName(accounts, filterKeywordsString) {
    // ...(c√≥digo similar, adaptado para recibir las keywords del formulario)...
    if (!filterKeywordsString || !filterKeywordsString.trim()) {
        logAction('‚ÑπÔ∏è No se aplicar√° filtro por fullName (no se proporcionaron palabras clave).');
        return accounts;
    }

    const keywords = filterKeywordsString
        .toLowerCase()
        .split(',')
        .map((k) => k.trim())
        .filter((k) => k);

    if (!keywords.length) {
        logAction('‚ÑπÔ∏è No se ingresaron palabras clave v√°lidas para filtrar.');
        return accounts;
    }

    logAction(`üîé Filtrando ${accounts.length} cuentas por fullName usando las claves: ${keywords.join(', ')}`);

    const filtered = accounts.filter((account) => {
        const fullNameLower = (account.fullName || '').toLowerCase();
        if (!fullNameLower) {
            return false; // No se puede filtrar si no hay fullName
        }
        // Verifica si ALGUNA de las keywords est√° incluida en el fullName
        return keywords.some((keyword) => fullNameLower.includes(keyword));
    });

    logAction(`üìä ${filtered.length} cuentas coinciden con el filtro.`);
    return filtered;
}


// --- Env√≠o de mensajes (sin cambios significativos, usa igClient global) ---
async function sendMessage(userId, message) {
    // ...(c√≥digo id√©ntico al que ten√≠as)...
    if (!igClient) throw new Error("Cliente Instagram no inicializado.");
    try {
        const thread = await igClient.entity.directThread([userId.toString()]);
        await thread.broadcastText(message);
        return true; // √âxito
    } catch (error) {
        let shouldStop = false;
        let waitTime = 0; // Tiempo de espera en ms

        if (error.response && error.response.statusCode === 400 && error.message.includes('Cannot message users you dont follow')) {
            logAction(`üö´ No se puede enviar mensaje a ${userId}: No sigues a este usuario, tiene DMs restringidos o cuenta inexistente.`);
        } else if (error.response?.body?.message?.includes('rate limited') || error.response?.statusCode === 429) {
            waitTime = 5 * 60 * 1000; // 5 minutos
            logAction(`‚è±Ô∏è L√≠mite de tasa alcanzado intentando enviar a ${userId}. Esperando ${waitTime / 60000} minutos...`);
        } else if (error.response?.body?.message?.includes('checkpoint_required')) {
            logAction(`üö® ¬°CHECKPOINT REQUERIDO! Deteniendo el script. Resuelve el checkpoint en Instagram.`);
            shouldStop = true; // Indicar que hay que detener el proceso
        } else if (error.message?.includes('login_required') || error.response?.statusCode === 403) {
             logAction(`üîí ¬°LOGIN REQUERIDO o Prohibido! Session ID inv√°lido/expirado o acci√≥n bloqueada. Deteniendo.`);
             shouldStop = true;
        } else {
            logAction(`‚ùå Error enviando mensaje a ${userId}: ${error.message}`);
            // Podr√≠as a√±adir una pausa corta aqu√≠ tambi√©n por si acaso
            waitTime = getRandomDelay(5000, 15000); // Espera corta tras error desconocido
            logAction(`‚è≥ Pausa corta de ${Math.round(waitTime / 1000)}s tras error inesperado.`);
        }

        if (waitTime > 0) {
            await sleep(waitTime);
        }

        // Devolvemos un objeto indicando el resultado y si hay que parar
        return { success: false, shouldStop: shouldStop };
    }
    // Si llegamos aqu√≠, el mensaje se envi√≥
    return { success: true, shouldStop: false };
}


// --- Configuraci√≥n Instagram (adaptada para recibir Session ID y Proxy) ---
async function setupInstagram(sessionId, proxyUrl) {
    // ...(c√≥digo similar, pero usa los par√°metros)...
    try {
        igClient = new IgApiClient(); // Crear nueva instancia

        if (proxyUrl) {
            igClient.state.proxyUrl = proxyUrl;
            logAction(`üåç Usando proxy: ${proxyUrl}`);
        }

        igClient.state.generateDevice(sessionId); // Usar el sessionId proporcionado

        // Necesario para simular un login v√°lido con Session ID
        // Importante: El sessionId debe ser v√°lido y reciente
        await igClient.state.deserializeCookieJar(JSON.stringify({
            "version": "tough-cookie@4.1.3", // O la versi√≥n que corresponda
            "storeType": "MemoryCookieStore",
            "rejectPublicSuffixes": true,
            "cookies": [{
                "key": "sessionid",
                "value": sessionId,
                "domain": "instagram.com",
                "path": "/",
                "secure": true,
                "httpOnly": true,
                "creation": new Date().toISOString(),
                "lastAccessed": new Date().toISOString()
            }]
        }));

        // Opcional: Simular flujos puede ayudar a evitar detecciones
        // await igClient.simulate.preLoginFlow();

        // Verificar la sesi√≥n obteniendo datos del usuario actual
        const user = await igClient.account.currentUser();
        if (!user || !user.pk) {
             throw new Error("No se pudo obtener informaci√≥n del usuario actual. Session ID podr√≠a ser inv√°lido.");
        }
        logAction(`‚úÖ Sesi√≥n de Instagram iniciada como: ${user.username} (ID: ${user.pk})`);
        botUsername = user.username; // Guardar el nombre de usuario del bot

        // await igClient.simulate.postLoginFlow();

        return true; // Indica √©xito

    } catch (error) {
        logAction(`‚ùå Error cr√≠tico configurando Instagram: ${error.message}`);
        if (error.response?.body) {
            logAction(`Detalles del error IG: ${JSON.stringify(error.response.body)}`);
        }
        if (error.message.includes('login_required') || error.message.includes('Login required') || error.response?.body?.message?.includes('checkpoint_required') || error.response?.statusCode === 403 ) {
            logAction("üö® ¬°ERROR DE LOGIN/SESI√ìN! Session ID inv√°lido, expirado o se requiere Checkpoint/Verificaci√≥n.");
            logAction("   Verifica tu SESSION_ID y resuelve cualquier Checkpoint pendiente en la app/web de Instagram.");
        } else {
            logAction("ü§î Posibles causas: Bloqueo de IP (considera proxy), cambio en la API de Instagram, session ID incorrecto.");
        }
        botUsername = null; // Resetear si falla el login
        // Propagar el error para detener el proceso en server.js
        throw new Error(`Fallo en configuraci√≥n de Instagram: ${error.message}`);
    }
}


// --- Funci√≥n principal refactorizada ---
async function runBotLogic(config) {
    // Desestructurar configuraci√≥n
    const {
        instagramSessionId,
        proxy,
        openaiApiKey,
        mongoUri,
        csvPath,
        csvType,
        filterKeywords,
        messageContext,
        maxMessages: configMaxMessages, // Renombrar para evitar conflicto con la variable del bucle
        baseDelaySeconds,
    } = config;

    // Validar configuraci√≥n esencial faltante (ya se hizo en server.js, pero doble check)
     if (!instagramSessionId || !openaiApiKey || !mongoUri || !csvPath || !messageContext) {
         throw new Error("Configuraci√≥n incompleta recibida por botLogic.");
     }

    // Inicializar clientes
    openai = new OpenAI({ apiKey: openaiApiKey });

    try {
        // 1. Conectar a MongoDB
        await connectMongo(mongoUri); // Ya maneja errores fatales

        // 2. Configurar Instagram
        // setupInstagram ahora lanza error si falla, deteniendo la ejecuci√≥n
        await setupInstagram(instagramSessionId, proxy);
        if (!botUsername) { // Doble check por si acaso
            throw new Error("Fallo al obtener el nombre de usuario del bot tras setup de Instagram.");
        }

        // 3. Leer CSV
        let rawAccounts = await readCSV(csvPath); // Lanza error si falla la lectura
        if (!rawAccounts || rawAccounts.length === 0) {
            logAction('‚ùå El archivo CSV est√° vac√≠o o no se pudo leer correctamente.');
            return; // Terminar ejecuci√≥n si el CSV est√° vac√≠o
        }

        // 4. Filtrar si es tipo 'followers'
        let accountsToProcess = rawAccounts;
        if (csvType === 'followers') {
             // Verificar columnas necesarias para 'followers' ANTES de filtrar
             if (!rawAccounts[0] || !rawAccounts[0].hasOwnProperty('fullName') || !rawAccounts[0].hasOwnProperty('userName')) {
                logAction("‚ùå Error: El CSV de tipo 'followers' debe contener las columnas 'fullName' y 'userName' (despu√©s de la limpieza). Verifica cabeceras detectadas y el archivo.");
                // Podr√≠as lanzar un error aqu√≠ si es cr√≠tico
                 return; // O simplemente terminar
             }
            accountsToProcess = await filterAccountsByFullName(rawAccounts, filterKeywords);
        }

        if (!accountsToProcess || accountsToProcess.length === 0) {
            logAction('‚ÑπÔ∏è No quedan cuentas para procesar despu√©s de la lectura y/o el filtrado.');
            return; // Terminar si no hay cuentas v√°lidas
        }

        // Verificar existencia de userName en las cuentas finales
         if (!accountsToProcess[0].hasOwnProperty('userName')) {
            const potentialUserKeys = ['user', 'usuario']; // Claves alternativas comunes (ya limpias)
            const userKey = Object.keys(accountsToProcess[0]).find(key => potentialUserKeys.includes(key));

            if (userKey) {
                logAction(`‚ö†Ô∏è Columna 'userName' no encontrada directamente, usando '${userKey}' en su lugar.`);
                // Re-mapear para asegurar que todos tengan la propiedad 'userName'
                accountsToProcess = accountsToProcess.map(acc => ({
                     ...acc,
                     userName: acc[userKey] || '' // Asignar userName desde la clave encontrada
                 }));
            } else {
                logAction("‚ùå Error: No se encontr√≥ la columna 'userName' (o similar como 'user', 'usuario') en las cuentas a procesar. Verifica el archivo CSV.");
                return; // Terminar si no hay identificador de usuario
            }
        }

        // Filtrar cuentas que no tengan un userName v√°lido despu√©s de todo
        accountsToProcess = accountsToProcess.filter(acc => acc.userName && acc.userName.trim() !== '');
        if (accountsToProcess.length === 0) {
             logAction('‚ÑπÔ∏è No quedan cuentas con un `userName` v√°lido para procesar.');
             return;
         }


        // 5. Determinar cu√°ntos mensajes enviar
        let maxMessagesToSend = configMaxMessages === 0 ? accountsToProcess.length : Math.min(configMaxMessages, accountsToProcess.length);
        logAction(`üéØ Se intentar√°n enviar mensajes a un m√°ximo de ${maxMessagesToSend} cuentas de ${accountsToProcess.length} disponibles.`);
        logAction(`‚è±Ô∏è Retardo base entre mensajes: ${baseDelaySeconds} segundos.`);
        logAction(`‚úâÔ∏è Contexto para la IA: "${messageContext}"`);

        // 6. Procesar cuentas
        let sent = 0, failed = 0, skipped = 0;
        const startTime = Date.now();

        for (let i = 0; i < maxMessagesToSend; i++) {
            const account = accountsToProcess[i];
            const targetUsername = account.userName?.trim();

             if (!targetUsername) {
                logAction(`‚ö†Ô∏è Fila ${i + 1} (original): Falta userName o est√° vac√≠o. Saltando.`);
                skipped++;
                continue; // Saltar esta iteraci√≥n
            }


            logAction(`\nüí¨ (${i + 1}/${maxMessagesToSend}) Procesando @${targetUsername}...`);

            // Verificar historial en MongoDB
            try {
                 const existingMessage = await mongoCollection.findOne({ destinatario: targetUsername, accion: 'mensaje_enviado' });
                 if (existingMessage) {
                     logAction(`‚ÑπÔ∏è Ya se envi√≥ un mensaje a @${targetUsername} el ${existingMessage.fecha}. Saltando.`);
                     skipped++;
                     if (i < maxMessagesToSend - 1) { // Peque√±a pausa antes del siguiente si saltamos
                         await sleep(getRandomDelay(1000, 3000));
                     }
                     continue; // Saltar esta iteraci√≥n
                 }
             } catch (dbError) {
                 logAction(`‚ö†Ô∏è Error consultando historial en MongoDB para @${targetUsername}: ${dbError.message}. Se continuar√° igualmente.`);
                 // No es fatal, pero se loguea. Se podr√≠a intentar enviar igualmente.
             }


            let igUserData;
            try {
                // Buscar usuario en Instagram
                 try {
                    igUserData = await igClient.user.searchExact(targetUsername);
                } catch (searchError) {
                     if (searchError.message?.includes('User not found')) {
                         logAction(`‚ùì Usuario @${targetUsername} no encontrado en Instagram.`);
                     } else if (searchError.message?.includes('rate limited')) {
                         logAction(`‚è±Ô∏è L√≠mite de tasa alcanzado buscando a @${targetUsername}. Esperando 5 minutos...`);
                         await sleep(5 * 60 * 1000);
                         logAction(`‚è±Ô∏è Reintentando b√∫squeda para @${targetUsername}...`);
                         try {
                             igUserData = await igClient.user.searchExact(targetUsername);
                         } catch (retryError) {
                             logAction(`‚ùå Error buscando a @${targetUsername} despu√©s de reintento: ${retryError.message}`);
                             // Registrar fallo y continuar al siguiente
                             await mongoCollection.insertOne({ username: targetUsername, error: `B√∫squeda fallida tras rate limit: ${retryError.message}`, date: new Date(), status: 'failed_search' });
                             failed++;
                             continue; // Saltar al siguiente usuario
                         }
                     } else if (searchError.message?.includes('checkpoint_required')) {
                         logAction(`üö® ¬°CHECKPOINT REQUERIDO durante b√∫squeda! Deteniendo script.`);
                         throw new Error("Checkpoint requerido detectado."); // Lanzar error para detener todo
                     } else if (searchError.message?.includes('login_required')) {
                          logAction(`üîí ¬°LOGIN REQUERIDO durante b√∫squeda! Deteniendo script.`);
                          throw new Error("Login requerido detectado."); // Lanzar error para detener todo
                      }
                       else {
                         logAction(`‚ùå Error buscando a @${targetUsername}: ${searchError.message}`);
                     }

                     // Si despu√©s de manejar errores, igUserData sigue sin definirse, registramos fallo y continuamos
                     if (!igUserData) {
                        await mongoCollection.insertOne({ username: targetUsername, error: `B√∫squeda fallida: ${searchError.message || 'Raz√≥n desconocida'}`, date: new Date(), status: 'failed_search' });
                        failed++;
                        continue; // Saltar al siguiente usuario
                    }
                 }

                // Si igUserData no tiene 'pk' incluso despu√©s de la b√∫squeda exitosa (raro pero posible)
                 if (!igUserData?.pk) {
                    logAction(`‚ùì Usuario @${targetUsername} encontrado pero sin ID (pk) v√°lido. Saltando.`);
                    await mongoCollection.insertOne({ username: targetUsername, error: 'Usuario encontrado sin ID (pk) v√°lido', date: new Date(), status: 'failed_search_invalid_data' });
                    failed++;
                    continue; // Saltar al siguiente usuario
                }

                logAction(`üë§ Encontrado: ${igUserData.full_name || targetUsername} (ID: ${igUserData.pk})`);

                // Generar mensaje con IA
                const message = await generateAIMessage(targetUsername, igUserData, messageContext);
                 if (!message || message.startsWith("Hola! Te contacto por esto:")) { // Si devuelve el fallback por error o es vac√≠o
                    logAction('‚ö†Ô∏è No se pudo generar mensaje √∫til con IA o hubo error. Saltando.');
                    failed++;
                    await mongoCollection.insertOne({ username: targetUsername, user_id: igUserData.pk, context: messageContext, error: 'Fallo generaci√≥n IA o mensaje fallback', date: new Date(), status: 'failed_ai' });
                    continue; // Saltar al siguiente usuario
                }
                logAction(`ü§ñ Mensaje IA: "${message}"`);

                // Enviar mensaje
                const sendResult = await sendMessage(igUserData.pk, message);

                if (sendResult.shouldStop) {
                    // Si sendMessage indic√≥ que debemos parar (Checkpoint, Login required)
                    logAction("üõë Deteniendo el proceso debido a un error cr√≠tico de Instagram.");
                    throw new Error("Detenci√≥n solicitada por sendMessage (Checkpoint/Login)");
                 }


                if (sendResult.success) {
                    const currentDate = new Date();
                    const formattedDate = formatDateTime(currentDate);
                    await mongoCollection.insertOne({
                        username: botUsername,
                        accion: 'mensaje_enviado',
                        destinatario: targetUsername,
                        fecha: formattedDate,
                        // message_content: message // Opcional: guardar el mensaje
                    });
                    logAction('‚úÖ Mensaje enviado y registrado en DB.');
                    sent++;
                } else {
                    // El mensaje fall√≥ pero no fue un error cr√≠tico para detener todo
                    logAction(`‚ùå Fallo al enviar mensaje a @${targetUsername} (ver logs anteriores).`);
                    failed++;
                    // Registrar fallo de env√≠o si no se hizo ya en sendMessage
                     const recentFailure = await mongoCollection.findOne({
                         destinatario: targetUsername, // Buscar por destinatario ahora
                         status: { $in: ['failed_send', 'failed'] }, // Buscar fallos gen√©ricos o de env√≠o
                         date: { $gt: new Date(Date.now() - 15000) } // Buscar en los √∫ltimos 15 seg
                     });
                    if (!recentFailure) {
                         await mongoCollection.insertOne({
                             username: botUsername, // Qui√©n intent√≥ enviar
                             accion: 'envio_fallido',
                             destinatario: targetUsername,
                             user_id: igUserData.pk,
                             message_attempted: message,
                             context: messageContext,
                             error: 'Fallo en el env√≠o (ver logs para detalles)',
                             fecha: formatDateTime(new Date()), // Usar fecha formateada
                             status: 'failed_send', // Status interno para posible reintento futuro
                         });
                     }
                    // No continuar al siguiente inmediatamente, la pausa se manejar√° despu√©s del bloque try/catch
                 }

                 // Pausa inteligente DESPU√âS de procesar un usuario (exitoso o fallido)
                 if (i < maxMessagesToSend - 1) {
                    // Aumentamos significativamente la aleatoriedad para parecer m√°s humano
                    // baseDelaySeconds (ej: 90) + aleatorio entre 30 y 90 segundos
                    const delay = (baseDelaySeconds * 1000) + getRandomDelay(30000, 90000);
                    logAction(`‚è≥ Esperando ${Math.round(delay / 1000)} segundos antes del pr√≥ximo usuario...`);
                    await sleep(delay);
                }


            } catch (error) {
                 // Captura errores inesperados DENTRO del bucle para un usuario espec√≠fico
                 // O errores propagados (como Checkpoint/Login desde search o send)
                 logAction(`üí• Error procesando @${targetUsername}: ${error.message}`);
                 failed++;
                 try {
                      await mongoCollection.insertOne({
                         username: targetUsername,
                         error: `Error inesperado en bucle o error cr√≠tico: ${error.message}`,
                         date: new Date(),
                         status: 'failed_unexpected_loop',
                     });
                 } catch (dbError) {
                     logAction(`‚ö†Ô∏è Error adicional al intentar registrar fallo inesperado en DB: ${dbError.message}`);
                 }

                 // Si el error indica detenerse (lanzado por search/send o similar)
                 if (error.message.includes("Checkpoint") || error.message.includes("Login") || error.message.includes("Detenci√≥n solicitada")) {
                     throw error; // Re-lanzar para que el catch externo lo maneje y termine runBotLogic
                 }

                 // Si fue un error "menor" inesperado, pausa larga y contin√∫a con el siguiente usuario
                 logAction(`‚è≥ Pausa larga (3-5 min) tras error inesperado con @${targetUsername}...`);
                 await sleep(getRandomDelay(180000, 300000));
                 continue; // Pasar al siguiente usuario en el bucle for
            }
        } // Fin del bucle for

        // 7. Resumen final
        const endTime = Date.now();
        const durationMinutes = Math.round((endTime - startTime) / 60000);
        const durationSeconds = Math.round((endTime - startTime) / 1000);

        logAction(`\nüéâ Proceso completado.`);
        logAction(`‚è±Ô∏è Duraci√≥n total: ${durationMinutes} minutos (${durationSeconds} segundos).`);
        logAction(`üìä Total procesados: ${sent + failed + skipped} de ${accountsToProcess.length} (${maxMessagesToSend} intentos).`);
        logAction(`‚úÖ Mensajes enviados con √©xito: ${sent}`);
        logAction(`‚ùå Mensajes fallidos (b√∫squeda, IA, env√≠o o error): ${failed}`);
        logAction(`‚è≠Ô∏è Usuarios saltados (ya contactados, sin username v√°lido): ${skipped}`);


    } catch (error) {
        // Captura errores fatales FUERA del bucle (conexi√≥n DB, setup IG, lectura CSV, error cr√≠tico propagado)
        logAction(`üí• Error fatal en la ejecuci√≥n del bot: ${error.message}`);
        // El error ser√° capturado por el .catch() en server.js tambi√©n
        throw error; // Re-lanzar para que server.js sepa que fall√≥
    } finally {
        // La desconexi√≥n de MongoDB se maneja ahora en el finally de server.js
        // para asegurar que se cierre incluso si hay error temprano.
         if (mongoClient) {
            await mongoClient.close().catch(err => logAction(`‚ö†Ô∏è Error al cerrar conexi√≥n MongoDB: ${err.message}`));
            logAction('üîå Conexi√≥n a MongoDB cerrada.');
            mongoClient = null; // Resetear cliente
            mongoCollection = null;
        }
        // No cerramos rl porque ya no existe
        logAction('üèÅ L√≥gica del bot finalizada.');
    }
}

// Exportar la funci√≥n principal para que server.js la use
module.exports = { runBotLogic };